#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AugmentedReality

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AugmentedReality_structs.hpp"


namespace SDK
{

// Class AugmentedReality.ARBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UARBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DebugDrawTrackedGeometry(class UARTrackedGeometry* TrackedGeometry, class UObject* WorldContextObject, const struct FLinearColor& Color, float OutlineThickness, float PersistForSeconds);
	static TArray<class UARTrackedGeometry*> GetAllGeometries();
	static struct FTransform GetLocalToTrackingTransform(const struct FARTraceResult& TraceResult);
	static struct FTransform GetLocalToWorldTransform(const struct FARTraceResult& TraceResult);
	static class UARTrackedGeometry* GetTrackedGeometry(const struct FARTraceResult& TraceResult);
	static EARTrackingQuality GetTrackingQuality();
	static bool IsARActive();
	static TArray<struct FARTraceResult> LineTraceTrackedObjects(const struct FVector2D& ScreenCoord);
	static bool StartAR();
	static void StopAR();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARBlueprintLibrary">();
	}
	static class UARBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARBlueprintLibrary>();
	}
};
static_assert(alignof(UARBlueprintLibrary) == 0x000008, "Wrong alignment on UARBlueprintLibrary");
static_assert(sizeof(UARBlueprintLibrary) == 0x000028, "Wrong size on UARBlueprintLibrary");

// Class AugmentedReality.ARTrackedGeometry
// 0x0010 (0x0038 - 0x0028)
class UARTrackedGeometry : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTrackedGeometry">();
	}
	static class UARTrackedGeometry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTrackedGeometry>();
	}
};
static_assert(alignof(UARTrackedGeometry) == 0x000008, "Wrong alignment on UARTrackedGeometry");
static_assert(sizeof(UARTrackedGeometry) == 0x000038, "Wrong size on UARTrackedGeometry");

// Class AugmentedReality.ARPlaneGeometry
// 0x0058 (0x0090 - 0x0038)
class UARPlaneGeometry final : public UARTrackedGeometry
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToTrackingTransform;                          // 0x0040(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                Center;                                            // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                Extent;                                            // 0x007C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetCenter() const;
	struct FVector GetExtent() const;
	struct FTransform GetLocalToTrackingTransform() const;
	struct FTransform GetLocalToWorldTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARPlaneGeometry">();
	}
	static class UARPlaneGeometry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARPlaneGeometry>();
	}
};
static_assert(alignof(UARPlaneGeometry) == 0x000010, "Wrong alignment on UARPlaneGeometry");
static_assert(sizeof(UARPlaneGeometry) == 0x000090, "Wrong size on UARPlaneGeometry");
static_assert(offsetof(UARPlaneGeometry, LocalToTrackingTransform) == 0x000040, "Member 'UARPlaneGeometry::LocalToTrackingTransform' has a wrong offset!");
static_assert(offsetof(UARPlaneGeometry, Center) == 0x000070, "Member 'UARPlaneGeometry::Center' has a wrong offset!");
static_assert(offsetof(UARPlaneGeometry, Extent) == 0x00007C, "Member 'UARPlaneGeometry::Extent' has a wrong offset!");

}

