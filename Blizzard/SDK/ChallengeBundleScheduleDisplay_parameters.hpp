#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeBundleScheduleDisplay

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.ExecuteUbergraph_ChallengeBundleScheduleDisplay
// 0x0020 (0x0020 - 0x0000)
struct ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_ComponentBoundEvent_TabId1;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_TabId;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_TabButton;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay) == 0x000020, "Wrong size on ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay, EntryPoint) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay, K2Node_ComponentBoundEvent_TabId1) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay::K2Node_ComponentBoundEvent_TabId1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay, K2Node_ComponentBoundEvent_TabId) == 0x000010, "Member 'ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay::K2Node_ComponentBoundEvent_TabId' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay, K2Node_ComponentBoundEvent_TabButton) == 0x000018, "Member 'ChallengeBundleScheduleDisplay_C_ExecuteUbergraph_ChallengeBundleScheduleDisplay::K2Node_ComponentBoundEvent_TabButton' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          TabButton;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature) == 0x000010, "Wrong size on ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature, TabId) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature::TabId' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature, TabButton) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_12_OnTabButtonCreated__DelegateSignature::TabButton' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature) == 0x000008, "Wrong size on ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature, TabId) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_BndEvt__CompendiumPageTabList_K2Node_ComponentBoundEvent_1_OnTabSelected__DelegateSignature::TabId' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.SetBundle
// 0x0010 (0x0010 - 0x0000)
struct ChallengeBundleScheduleDisplay_C_SetBundle final
{
public:
	class UFortChallengeBundleScheduleItem*       BundleInstance;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleScheduleDefinition* BundleScheduleDef_0;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_SetBundle) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_SetBundle");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_SetBundle) == 0x000010, "Wrong size on ChallengeBundleScheduleDisplay_C_SetBundle");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_SetBundle, BundleInstance) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_SetBundle::BundleInstance' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_SetBundle, BundleScheduleDef_0) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_SetBundle::BundleScheduleDef_0' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.UpdateTabs
// 0x0088 (0x0088 - 0x0000)
struct ChallengeBundleScheduleDisplay_C_UpdateTabs final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortChallengeBundleItem*>       CallFunc_GetChallengeBundleItems_OutActiveItems;   // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class UFortChallengeBundleItemDefinition*> CallFunc_GetChallengeBundleItems_OutUnlockableItems; // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	class UFortChallengeBundleItem*               CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleItemDefinition*     CallFunc_GetChallengeDefinitionBP_ReturnValue;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaChallengeBundle_UpsellButton_C*  CallFunc_Create_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortChallengeBundleItemDefinition*     CallFunc_Array_Get_Item1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue1;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChallengeBundlePage_C*                 CallFunc_Create_ReturnValue1;                      // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_UpdateTabs) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_UpdateTabs");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_UpdateTabs) == 0x000088, "Wrong size on ChallengeBundleScheduleDisplay_C_UpdateTabs");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, Temp_int_Array_Index_Variable) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_GetChallengeBundleItems_OutActiveItems) == 0x000010, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_GetChallengeBundleItems_OutActiveItems' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_GetChallengeBundleItems_OutUnlockableItems) == 0x000020, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_GetChallengeBundleItems_OutUnlockableItems' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Array_Get_Item) == 0x000030, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_GetChallengeDefinitionBP_ReturnValue) == 0x000038, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_GetChallengeDefinitionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, Temp_int_Array_Index_Variable1) == 0x000044, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_GetOwningPlayer_ReturnValue) == 0x000050, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Create_ReturnValue) == 0x000058, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Array_Get_Item1) == 0x000060, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Array_Length_ReturnValue1) == 0x000068, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, Temp_int_Loop_Counter_Variable1) == 0x00006C, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_GetOwningPlayer_ReturnValue1) == 0x000070, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_GetOwningPlayer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Create_ReturnValue1) == 0x000078, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Create_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Less_IntInt_ReturnValue1) == 0x000080, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_UpdateTabs, CallFunc_Add_IntInt_ReturnValue1) == 0x000084, "Member 'ChallengeBundleScheduleDisplay_C_UpdateTabs::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.CreateTab
// 0x00E0 (0x00E0 - 0x0000)
struct ChallengeBundleScheduleDisplay_C_CreateTab final
{
public:
	class UFortChallengeBundleItemDefinition*     ChallengeDef;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                ContentWidget;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0018)()
	class FString                                 CallFunc_GetPersistentName_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFortTabButtonLabelInfo                K2Node_MakeStruct_FortTabButtonLabelInfo;          // 0x0038(0x0090)()
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RegisterFortTab_ReturnValue;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_CreateTab) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_CreateTab");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_CreateTab) == 0x0000E0, "Wrong size on ChallengeBundleScheduleDisplay_C_CreateTab");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, ChallengeDef) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::ChallengeDef' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, ContentWidget) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::ContentWidget' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, CallFunc_GetPersistentName_ReturnValue) == 0x000028, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::CallFunc_GetPersistentName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, K2Node_MakeStruct_FortTabButtonLabelInfo) == 0x000038, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::K2Node_MakeStruct_FortTabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, CallFunc_Conv_StringToName_ReturnValue) == 0x0000C8, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, CallFunc_RegisterFortTab_ReturnValue) == 0x0000D0, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::CallFunc_RegisterFortTab_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_CreateTab, CallFunc_AddChild_ReturnValue) == 0x0000D8, "Member 'ChallengeBundleScheduleDisplay_C_CreateTab::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.HandleTabCreated
// 0x0048 (0x0048 - 0x0000)
struct ChallengeBundleScheduleDisplay_C_HandleTabCreated final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          Button;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          LocalTab;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LocalTabId;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UIconTabButton_C*                       K2Node_DynamicCast_AsIcon_Tab_Button;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0030(0x0018)()
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_HandleTabCreated) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_HandleTabCreated");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_HandleTabCreated) == 0x000048, "Wrong size on ChallengeBundleScheduleDisplay_C_HandleTabCreated");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, TabId) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::TabId' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, Button) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::Button' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, LocalTab) == 0x000010, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::LocalTab' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, LocalTabId) == 0x000018, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::LocalTabId' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, K2Node_DynamicCast_AsIcon_Tab_Button) == 0x000020, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::K2Node_DynamicCast_AsIcon_Tab_Button' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabCreated, CallFunc_TextToUpper_ReturnValue) == 0x000030, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabCreated::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function ChallengeBundleScheduleDisplay.ChallengeBundleScheduleDisplay_C.HandleTabSelected
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) ChallengeBundleScheduleDisplay_C_HandleTabSelected final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetActiveTab_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeBundleScheduleDisplay_C_HandleTabSelected) == 0x000008, "Wrong alignment on ChallengeBundleScheduleDisplay_C_HandleTabSelected");
static_assert(sizeof(ChallengeBundleScheduleDisplay_C_HandleTabSelected) == 0x000010, "Wrong size on ChallengeBundleScheduleDisplay_C_HandleTabSelected");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabSelected, TabId) == 0x000000, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabSelected::TabId' has a wrong offset!");
static_assert(offsetof(ChallengeBundleScheduleDisplay_C_HandleTabSelected, CallFunc_GetActiveTab_ReturnValue) == 0x000008, "Member 'ChallengeBundleScheduleDisplay_C_HandleTabSelected::CallFunc_GetActiveTab_ReturnValue' has a wrong offset!");

}

