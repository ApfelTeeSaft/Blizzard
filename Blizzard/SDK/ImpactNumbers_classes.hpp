#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImpactNumbers

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ImpactNumbers.ImpactNumbers_C
// 0x0080 (0x0570 - 0x04F0)
class AImpactNumbers_C final : public AFortDamageNumbersActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F0(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Spacing_percentage_for_1s;                         // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FontYSize_0;                                       // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FontXSize_0;                                       // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FontSizeScaleMaxPerc;                              // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Standard_Hit_Color;                                // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Critical_Wall_Hit_Color;                           // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Player_Damage_Color;                               // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_Spacing_Multiplier;                         // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Number_of_number_rotations;                        // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Critical_Hit_Multiplier;                           // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_from_Camera_Before_Doubling_Size;         // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Critical_Enemy_Hit_Color;                          // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Number_offset_per;                                 // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_ImpactNumbers(int32 EntryPoint);
	void OnNewDamageNumber(const struct FFortDamageNumberInfo& NewDamageNumberInfo);
	void UserConstructionScript();
	void init_a_new_number_set(struct FFortDamageNumberInfo& NewDamageHitInfoStruct, struct FTransform* OutCameraTransform, struct FVector* OutNumberLocation);
	void Set_Material_Pararmeters(struct FFortDamageNumberInfo& NewDamageHitInfoStruct, const struct FTransform& CameraTransform, const struct FVector& NumberLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ImpactNumbers_C">();
	}
	static class AImpactNumbers_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AImpactNumbers_C>();
	}
};
static_assert(alignof(AImpactNumbers_C) == 0x000008, "Wrong alignment on AImpactNumbers_C");
static_assert(sizeof(AImpactNumbers_C) == 0x000570, "Wrong size on AImpactNumbers_C");
static_assert(offsetof(AImpactNumbers_C, UberGraphFrame) == 0x0004F0, "Member 'AImpactNumbers_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, DefaultSceneRoot) == 0x0004F8, "Member 'AImpactNumbers_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Spacing_percentage_for_1s) == 0x000500, "Member 'AImpactNumbers_C::Spacing_percentage_for_1s' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, FontYSize_0) == 0x000504, "Member 'AImpactNumbers_C::FontYSize_0' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, FontXSize_0) == 0x000508, "Member 'AImpactNumbers_C::FontXSize_0' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, FontSizeScaleMaxPerc) == 0x00050C, "Member 'AImpactNumbers_C::FontSizeScaleMaxPerc' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Standard_Hit_Color) == 0x000510, "Member 'AImpactNumbers_C::Standard_Hit_Color' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Critical_Wall_Hit_Color) == 0x000520, "Member 'AImpactNumbers_C::Critical_Wall_Hit_Color' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Player_Damage_Color) == 0x000530, "Member 'AImpactNumbers_C::Player_Damage_Color' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Number_Spacing_Multiplier) == 0x000540, "Member 'AImpactNumbers_C::Number_Spacing_Multiplier' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Number_of_number_rotations) == 0x000544, "Member 'AImpactNumbers_C::Number_of_number_rotations' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Critical_Hit_Multiplier) == 0x000548, "Member 'AImpactNumbers_C::Critical_Hit_Multiplier' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Distance_from_Camera_Before_Doubling_Size) == 0x00054C, "Member 'AImpactNumbers_C::Distance_from_Camera_Before_Doubling_Size' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Critical_Enemy_Hit_Color) == 0x000550, "Member 'AImpactNumbers_C::Critical_Enemy_Hit_Color' has a wrong offset!");
static_assert(offsetof(AImpactNumbers_C, Number_offset_per) == 0x000560, "Member 'AImpactNumbers_C::Number_offset_per' has a wrong offset!");

}

